// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game.proto
// Original file comments:
// run the following command to generate the python classes <from example directory>
// python -m grpc_tools.protoc -I../../../ --python_out=. --pyi_out=. --grpc_python_out=. ../../../game.proto
//
// run the following commands to generate the CPP objects <from example directory>
// export PATH=export PATH=/home/nszl/42cursus/gomoku/frontend/grpc/bin:$$PATH
// protoc -I ../../../  --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` ../../../game.proto
// protoc -I ../../../ --cpp_out=.  ../../../game.proto
//
#ifndef GRPC_game_2eproto__INCLUDED
#define GRPC_game_2eproto__INCLUDED

#include "game.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class Game final {
 public:
  static constexpr char const* service_full_name() {
    return "Game";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetGameMeta(::grpc::ClientContext* context, const ::Empty& request, ::GameMeta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameMeta>> AsyncGetGameMeta(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameMeta>>(AsyncGetGameMetaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameMeta>> PrepareAsyncGetGameMeta(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameMeta>>(PrepareAsyncGetGameMetaRaw(context, request, cq));
    }
    virtual ::grpc::Status SetGameMeta(::grpc::ClientContext* context, const ::GameMeta& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncSetGameMeta(::grpc::ClientContext* context, const ::GameMeta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncSetGameMetaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncSetGameMeta(::grpc::ClientContext* context, const ::GameMeta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncSetGameMetaRaw(context, request, cq));
    }
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncReset(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncReset(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncResetRaw(context, request, cq));
    }
    virtual ::grpc::Status SuggestNextMove(::grpc::ClientContext* context, const ::GameState& request, ::GameState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameState>> AsyncSuggestNextMove(::grpc::ClientContext* context, const ::GameState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameState>>(AsyncSuggestNextMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameState>> PrepareAsyncSuggestNextMove(::grpc::ClientContext* context, const ::GameState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameState>>(PrepareAsyncSuggestNextMoveRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLastGameState(::grpc::ClientContext* context, const ::Empty& request, ::GameState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameState>> AsyncGetLastGameState(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameState>>(AsyncGetLastGameStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameState>> PrepareAsyncGetLastGameState(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GameState>>(PrepareAsyncGetLastGameStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetGameMeta(::grpc::ClientContext* context, const ::Empty* request, ::GameMeta* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGameMeta(::grpc::ClientContext* context, const ::Empty* request, ::GameMeta* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetGameMeta(::grpc::ClientContext* context, const ::GameMeta* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetGameMeta(::grpc::ClientContext* context, const ::GameMeta* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SuggestNextMove(::grpc::ClientContext* context, const ::GameState* request, ::GameState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SuggestNextMove(::grpc::ClientContext* context, const ::GameState* request, ::GameState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLastGameState(::grpc::ClientContext* context, const ::Empty* request, ::GameState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLastGameState(::grpc::ClientContext* context, const ::Empty* request, ::GameState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameMeta>* AsyncGetGameMetaRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameMeta>* PrepareAsyncGetGameMetaRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncSetGameMetaRaw(::grpc::ClientContext* context, const ::GameMeta& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncSetGameMetaRaw(::grpc::ClientContext* context, const ::GameMeta& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncResetRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameState>* AsyncSuggestNextMoveRaw(::grpc::ClientContext* context, const ::GameState& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameState>* PrepareAsyncSuggestNextMoveRaw(::grpc::ClientContext* context, const ::GameState& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameState>* AsyncGetLastGameStateRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GameState>* PrepareAsyncGetLastGameStateRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetGameMeta(::grpc::ClientContext* context, const ::Empty& request, ::GameMeta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameMeta>> AsyncGetGameMeta(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameMeta>>(AsyncGetGameMetaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameMeta>> PrepareAsyncGetGameMeta(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameMeta>>(PrepareAsyncGetGameMetaRaw(context, request, cq));
    }
    ::grpc::Status SetGameMeta(::grpc::ClientContext* context, const ::GameMeta& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncSetGameMeta(::grpc::ClientContext* context, const ::GameMeta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncSetGameMetaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncSetGameMeta(::grpc::ClientContext* context, const ::GameMeta& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncSetGameMetaRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncReset(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncReset(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status SuggestNextMove(::grpc::ClientContext* context, const ::GameState& request, ::GameState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameState>> AsyncSuggestNextMove(::grpc::ClientContext* context, const ::GameState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameState>>(AsyncSuggestNextMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameState>> PrepareAsyncSuggestNextMove(::grpc::ClientContext* context, const ::GameState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameState>>(PrepareAsyncSuggestNextMoveRaw(context, request, cq));
    }
    ::grpc::Status GetLastGameState(::grpc::ClientContext* context, const ::Empty& request, ::GameState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameState>> AsyncGetLastGameState(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameState>>(AsyncGetLastGameStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameState>> PrepareAsyncGetLastGameState(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GameState>>(PrepareAsyncGetLastGameStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetGameMeta(::grpc::ClientContext* context, const ::Empty* request, ::GameMeta* response, std::function<void(::grpc::Status)>) override;
      void GetGameMeta(::grpc::ClientContext* context, const ::Empty* request, ::GameMeta* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetGameMeta(::grpc::ClientContext* context, const ::GameMeta* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetGameMeta(::grpc::ClientContext* context, const ::GameMeta* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SuggestNextMove(::grpc::ClientContext* context, const ::GameState* request, ::GameState* response, std::function<void(::grpc::Status)>) override;
      void SuggestNextMove(::grpc::ClientContext* context, const ::GameState* request, ::GameState* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLastGameState(::grpc::ClientContext* context, const ::Empty* request, ::GameState* response, std::function<void(::grpc::Status)>) override;
      void GetLastGameState(::grpc::ClientContext* context, const ::Empty* request, ::GameState* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GameMeta>* AsyncGetGameMetaRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameMeta>* PrepareAsyncGetGameMetaRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncSetGameMetaRaw(::grpc::ClientContext* context, const ::GameMeta& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncSetGameMetaRaw(::grpc::ClientContext* context, const ::GameMeta& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncResetRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameState>* AsyncSuggestNextMoveRaw(::grpc::ClientContext* context, const ::GameState& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameState>* PrepareAsyncSuggestNextMoveRaw(::grpc::ClientContext* context, const ::GameState& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameState>* AsyncGetLastGameStateRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GameState>* PrepareAsyncGetLastGameStateRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetGameMeta_;
    const ::grpc::internal::RpcMethod rpcmethod_SetGameMeta_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_SuggestNextMove_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastGameState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetGameMeta(::grpc::ServerContext* context, const ::Empty* request, ::GameMeta* response);
    virtual ::grpc::Status SetGameMeta(::grpc::ServerContext* context, const ::GameMeta* request, ::Empty* response);
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response);
    virtual ::grpc::Status SuggestNextMove(::grpc::ServerContext* context, const ::GameState* request, ::GameState* response);
    virtual ::grpc::Status GetLastGameState(::grpc::ServerContext* context, const ::Empty* request, ::GameState* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGameMeta() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGameMeta(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameMeta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGameMeta(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GameMeta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetGameMeta() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGameMeta(::grpc::ServerContext* /*context*/, const ::GameMeta* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGameMeta(::grpc::ServerContext* context, ::GameMeta* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SuggestNextMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SuggestNextMove() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SuggestNextMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuggestNextMove(::grpc::ServerContext* /*context*/, const ::GameState* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuggestNextMove(::grpc::ServerContext* context, ::GameState* request, ::grpc::ServerAsyncResponseWriter< ::GameState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastGameState() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetLastGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastGameState(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastGameState(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GameState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetGameMeta<WithAsyncMethod_SetGameMeta<WithAsyncMethod_Reset<WithAsyncMethod_SuggestNextMove<WithAsyncMethod_GetLastGameState<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGameMeta() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Empty, ::GameMeta>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Empty* request, ::GameMeta* response) { return this->GetGameMeta(context, request, response); }));}
    void SetMessageAllocatorFor_GetGameMeta(
        ::grpc::MessageAllocator< ::Empty, ::GameMeta>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Empty, ::GameMeta>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGameMeta(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameMeta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGameMeta(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::GameMeta* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetGameMeta() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::GameMeta, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameMeta* request, ::Empty* response) { return this->SetGameMeta(context, request, response); }));}
    void SetMessageAllocatorFor_SetGameMeta(
        ::grpc::MessageAllocator< ::GameMeta, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GameMeta, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGameMeta(::grpc::ServerContext* /*context*/, const ::GameMeta* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGameMeta(
      ::grpc::CallbackServerContext* /*context*/, const ::GameMeta* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Reset() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Empty, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Empty* request, ::Empty* response) { return this->Reset(context, request, response); }));}
    void SetMessageAllocatorFor_Reset(
        ::grpc::MessageAllocator< ::Empty, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Empty, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SuggestNextMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SuggestNextMove() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::GameState, ::GameState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GameState* request, ::GameState* response) { return this->SuggestNextMove(context, request, response); }));}
    void SetMessageAllocatorFor_SuggestNextMove(
        ::grpc::MessageAllocator< ::GameState, ::GameState>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GameState, ::GameState>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SuggestNextMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuggestNextMove(::grpc::ServerContext* /*context*/, const ::GameState* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuggestNextMove(
      ::grpc::CallbackServerContext* /*context*/, const ::GameState* /*request*/, ::GameState* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLastGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLastGameState() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::Empty, ::GameState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Empty* request, ::GameState* response) { return this->GetLastGameState(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastGameState(
        ::grpc::MessageAllocator< ::Empty, ::GameState>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Empty, ::GameState>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLastGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastGameState(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastGameState(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::GameState* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetGameMeta<WithCallbackMethod_SetGameMeta<WithCallbackMethod_Reset<WithCallbackMethod_SuggestNextMove<WithCallbackMethod_GetLastGameState<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGameMeta() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGameMeta(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameMeta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetGameMeta() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGameMeta(::grpc::ServerContext* /*context*/, const ::GameMeta* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SuggestNextMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SuggestNextMove() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SuggestNextMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuggestNextMove(::grpc::ServerContext* /*context*/, const ::GameState* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastGameState() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetLastGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastGameState(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGameMeta() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGameMeta(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameMeta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGameMeta(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetGameMeta() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGameMeta(::grpc::ServerContext* /*context*/, const ::GameMeta* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGameMeta(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SuggestNextMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SuggestNextMove() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SuggestNextMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuggestNextMove(::grpc::ServerContext* /*context*/, const ::GameState* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuggestNextMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastGameState() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetLastGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastGameState(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastGameState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGameMeta() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGameMeta(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGameMeta(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameMeta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGameMeta(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetGameMeta() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetGameMeta(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGameMeta(::grpc::ServerContext* /*context*/, const ::GameMeta* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGameMeta(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Reset() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reset(context, request, response); }));
    }
    ~WithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SuggestNextMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SuggestNextMove() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SuggestNextMove(context, request, response); }));
    }
    ~WithRawCallbackMethod_SuggestNextMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuggestNextMove(::grpc::ServerContext* /*context*/, const ::GameState* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuggestNextMove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLastGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLastGameState() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastGameState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLastGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastGameState(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastGameState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGameMeta() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::GameMeta>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Empty, ::GameMeta>* streamer) {
                       return this->StreamedGetGameMeta(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGameMeta(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameMeta* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGameMeta(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::GameMeta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetGameMeta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetGameMeta() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GameMeta, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GameMeta, ::Empty>* streamer) {
                       return this->StreamedSetGameMeta(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetGameMeta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetGameMeta(::grpc::ServerContext* /*context*/, const ::GameMeta* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetGameMeta(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GameMeta,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Empty, ::Empty>* streamer) {
                       return this->StreamedReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SuggestNextMove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SuggestNextMove() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GameState, ::GameState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GameState, ::GameState>* streamer) {
                       return this->StreamedSuggestNextMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SuggestNextMove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SuggestNextMove(::grpc::ServerContext* /*context*/, const ::GameState* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSuggestNextMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GameState,::GameState>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastGameState() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::GameState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Empty, ::GameState>* streamer) {
                       return this->StreamedGetLastGameState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastGameState(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::GameState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastGameState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::GameState>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetGameMeta<WithStreamedUnaryMethod_SetGameMeta<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_SuggestNextMove<WithStreamedUnaryMethod_GetLastGameState<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetGameMeta<WithStreamedUnaryMethod_SetGameMeta<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_SuggestNextMove<WithStreamedUnaryMethod_GetLastGameState<Service > > > > > StreamedService;
};


#endif  // GRPC_game_2eproto__INCLUDED
